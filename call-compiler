#!/usr/bin/env bash

# this script centralizes the ability of the server to call compilers on the
# system. It requires 2 inputs, language and file, and can accept up to 3
# optional flags: platform, compiler, and language version.

# sets optional flag choices, and requires input for each set flag
OPTS=`getopt -o hp:c:v: --long help,platform:,compiler:,std: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

# declare variables that get set from input and flags
help="f"
platform="default"
version="default"
compiler="default"
language="none"
file="none"

# while loop goes through all set flags and assigns the variables
# appropriately. The strange assignment syntax strips equal signs if they are
# used in flag values, like `python --std=3.5 --compiler=pypy foo.py`
while true; do
  case "$1" in
    -h | --help ) help="t"; shift ;;
    -p | --platform ) platform="${2##*=}"; shift 2 ;;
    -c | --compiler ) compiler="${2##*=}"; shift 2 ;;
    -v | --std ) version="${2##*=}"; shift 2 ;;
    -- ) shift ;;
    * ) language="$1"; shift; file="$1"; shift; break ;;
  esac
done

if [[ "$help" = "t" ]]; then
  echo "optional flags"
  echo "-h, --help - outputs this message"
  echo "--std - specify a different language version"
  echo "--compiler - specify a different compiler"
  echo "--platform - specify a different platform. Required if compiling to Windows or WebAssembly"
  echo
  echo "supported platforms: linux, windows, wasm"
  echo
  echo "languages on Linux: python, ruby, javascript, bash, lua, java, go, fortran, rust, objc, objcpp, ada, cpp, and c"
  echo "languages on Windows: python, ruby, javascript, lua, java, objc, objcpp, cpp, and c"
  echo "languages on WebAssembly: cpp, c, and rust"
  echo
  echo "available interpreters and compilers: cpython, pypy, gcc, clang, tcc, emcc, javac, rustc, cargo, lua, js, ruby, bash, gnat, gfortran-8, gccgo, g++, clang++"
  echo
  echo 'python versions supported by interpreters'
  echo "pypy versions: 2, 3, 2.7, 3.5"
  echo "default pypy version: 3.5"
  echo "cpython versions: 3, 3.6, 3.7"
  echo "default cpython version: 3.6"
  echo "cpython is default"
  echo
  echo 'languages with multiple versions on gcc'
  echo "c versions: 'iso9899:2018', 'gnu18', 'c18', 'iso9899:2017', 'gnu17', 'c17', 'iso9899:2011', 'gnu11', 'c11', 'iso9899:1999', 'gnu99' 'c99', 'iso9899:199409', 'iso9899:1990', 'gnu90' 'c90', 'ansi', 'gnu89', 'c89'"
  echo "the default c version is specified by gcc"
  echo "c++ versions: 'gnu++17', 'c++17', 'gnu++14', 'c++14', 'gnu++11', 'c++11', 'gnu++03', 'c++03', 'gnu++98', 'c++98'"
  echo "the default c++ version is specified by g++"
  echo "fortran versions: 'f2018', 'f2008', 'f2003', 'f95', 'gnu', 'legacy'"
  echo "the default version of fortran is specified by gfortran-8"
  echo "ada versions: 'gnat2012', 'gnat2005', 'gnat95', 'gnat83'"
  echo "the default version of ada is specified by gnat"
  echo
  echo "languages with only one version on gcc"
  echo "golang"
  echo
  echo 'languages with multiple versions on clang'
  echo "c versions: 'c89', 'c90', 'iso9899:1990', 'iso9899:199409', 'gnu89', 'gnu90', 'c99', 'gnu99', 'c11', 'gnu11', 'c17', 'iso9899:2017', 'gnu17'"
  echo "the default version is specified by clang"
  echo "c++ versions: 'c++98', 'c++03', 'gnu++98', 'gnu++03', 'c++11', 'gnu++11', 'c++14', 'gnu++14', 'c++17', 'gnu++17'"
  echo "the default version is specified by clang++"
  echo
  echo "languages with only one version on clang"
  echo "Objective-C"
  echo "Objective-C++"
  echo
  echo "languages with only one supported version"
  echo "ruby version: 2.3"
  echo "java version: 11"
  echo "lua version: 5.3"
  echo "rust version: 1.33"
  echo 'bash version: 4.3'
  echo 'javascript version: 4.3'
  echo
fi



# removes all binaries when this file is called
x="$(ls -1)"
# check for c/c++
if [[ "$x" = *"cc"* ]]; then
  rm cc*
fi
# check for objective c/c++
if [[ "$x" = *"cO"* ]]; then
  rm cO*
fi
# check for rust
if [[ "$x" = *"cr"* ]]; then
  rm cr*
fi
# check for java classes
if [[ "$x" = *"class"* ]]; then
  rm *.class
fi
# check for ada files
if [[ "$x" = *"ali"* ]]; then
  temp="$(ls *ali)"
  rm ${temp%.*}
  rm *.o
  rm *.ali
fi
# check for fortran
if [[ "$x" = *"cf"* ]]; then
  rm cf*
fi
# check for go
if [[ "$x" = *"cg"* ]]; then
  rm cg*
fi



if [[ "$language" = 'python' ]]; then
  if [[ "$compiler" = "pypy" ]]; then
    if [[ "$version" = "2.7" ]] || [[ "$version" = "2" ]]; then
      pypy "$file" &> output.txt
    elif [[ "$version" = "default" ]] || [[ "$version" = "3.5" ]] || [[ "$version" = "3" ]]; then
      pypy3 "$file" &> output.txt
    else
      echo "that version of Pypy is not available."
      echo "the available versions of Pypy are 2, 2.7, 3, 3.5 (default)"
    fi

  elif [[ "$compiler" = "default" ]] || [[ "$compiler" = "cpython" ]] || [[ "$compiler" = "python" ]]; then
    if [[ "$version" = "default" ]] || [[ "$version" = "3.6" ]] || [[ "$version" = "3" ]]; then
      python3.6 "$file" &> output.txt
    elif [[ "$version" = "3.7" ]]; then
      python3.7 "$file" &> output.txt
    else
      echo "than version of Python is not available."
      echo "the available versions of Python are 3.7, 3, 3.6 (default)"
    fi
  else
    echo "that Python interpreter is not available."
    echo "the available Python interpreters are Pypy and CPython (default)"
  fi


elif [[ "$language" = "bash" ]]; then
  if [[ "$platform" != "windows" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "4.3" ]]; then
      bash "$file" &> output.txt
    else
      echo "that Bash interpreter is not available."
      echo "the available Bash interpreter is 4.3 (default)"
    fi
  else
    echo "Bash cannot run on Windows." > output.txt
  fi


elif [[ "$language" = "java" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "javac" ]]; then
      javac "$file" 2> output.txt
      object=${file%.*}
      java ${object^} &>> output.txt
  else
    echo "that Java compiler is not available."
    echo "the available Java compiler is javac (default)"
  fi


elif [[ "$language" = "ruby" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "2.3" ]]; then
    ruby "$file" &> output.txt
  else
    echo "that Ruby interpreter is not available."
    echo "the available Ruby interpreter is 2.3 (default)"
  fi


elif [[ "$language" = "js" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "js" ]] || [[ "$compiler" = "javascript" ]]; then
    js "$file" &> output.txt
  else
    echo "that JavaScript interpreter is not available."
    echo "the available JavaScript interpreter is js (default)"
  fi


elif [[ "$language" = "lua" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "5.3" ]]; then
    lua5.3 "$file" &> output.txt
  else
    echo "that Lua interpreter is not available."
    echo "the available Lua interpreter is 5.3"
  fi


elif [[ "$language" = "go" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "gcc" ]] || [[ "$compiler" = "gccgo" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      gccgo "$file" -o cgo 2> output.txt
      ./cgo &>> output.txt
    else
      echo "Go is not available on that platform." > output.txt
      echo "Go is available on linux (default)" >> output.txt
    fi
  else
    echo "that Go compiler is not available."
    echo "the available Go compiler is gccgo (default)"
  fi


elif [[ "$language" = "fortran" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "gcc" ]] || [[ "$compiler" = "gfortran" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      if [[ "$version" = "default" ]]; then
        gfortran-8 -std=f2018 "$file" -o cfortran 2> output.txt
        ./cfortran &>> output.txt
      elif [[ "$version" != "default" ]]; then
        gfortran-8 -std="$version" "$file" -o cfortran 2> output.txt
        ./cfortran &>> output.txt
      fi
    else
      echo "Fortran is not available for that platform." > output.txt
      echo "Fortran is available on linux (default)" >> output.txt
    fi
  else
    echo "that Fortran compiler is not available."
    echo "the available Fortran compiler is gfortran (default)"
  fi


# needs to be installed manually and add .cargo/bin to PATH
elif [[ "$language" = "rust" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "rustc" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      rustc "$file" -o crust 2> output.txt
      ./crust &>> output.txt

    elif [[ "$platform" = "wasm" ]] || [[ "$platform" = "webassembly" ]]; then
      rustc --target wasm32-unknown-unknown "$file" -o crust.wasm 2> output.txt
    else
      echo "Rust is not available on that platform." > output.txt
      echo "Rust is available for WebAssembly, linux (default)" >> output.txt
    fi
  else
    echo "that Rust compiler is not available."
    echo "The available Rust compiler is rustc (default)"
  fi


elif [[ "$language" = "objc" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "clang" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      clang -objc "$file" -o cObjc 2> output.txt
      ./cObjc &>> output.txt

    elif [[ "$platform" = "windows" ]]; then
      clang -objc --target=x86_64-pc-windows-gnu "$file" -o cObjc.exe 2> output.txt
    else
      echo "Objective-C is not available for that platform." > output.txt
      echo "Objective-C is available for Windows, linux (default)" >> output.txt
    fi
  else
    echo "that Objective-C compiler is not available."
    echo "the Objective-C compiler is clang"
  fi


elif [[ "$language" = "objcpp" ]] || [[ "$language" = "objc++" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "clang" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      clang -objc++ "$file" -o cObjcpp 2> output.txt
      ./cObjcpp &>> output.txt

    elif [[ "$platform" = "windows" ]]; then
      clang -objc++ --target=x86_64-pc-windows-gnu "$file" -o cObjcpp.exe 2> output.txt
    else
      echo "Objective-C++ is not available for that platform." > output.txt
      echo "Objective-C++ is available for Windows, linux (default)" >> output.txt
    fi
  else
    echo "that Objective-C++ compiler is not available."
    echo "the Objective-C++ compiler is clang (default)"
  fi


elif [[ "$language" = "ada" ]]; then
  if [[ "$compiler" = "default" ]] || [[ "$compiler" = "gcc" ]] || [[ "$compiler" = "gnat" ]]; then
    if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
      if [[ "$version" = "default" ]]; then
        gnat make "$file" 2> output.txt
        ./${file%.*} &>> output.txt
      elif [[ "$version" != "default" ]]; then
        gnat make -"$version" "$file" 2> output.txt
        ./${file%.*} &>> output.txt
      fi
    else
      echo "Ada is not available for that platform." > output.txt
      echo "Ada is available for linux (default)" >> output.txt
    fi
  else
    echo "that Ada compiler is not available."
    echo "the Ada compiler is gnat (default)"
  fi


elif [[ "$language" = "cpp" ]]; then
  if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "gcc" ]] || [[ "$compiler" = "g++" ]]; then
      if [[ "$version" = "default" ]]; then
        g++ "$file" -o ccpp 2> output.txt
        ./ccpp &>> output.txt
      elif [[ "$version" != "default" ]]; then
        g++ -std="$version" "$file" -o ccpp 2> output.txt
        ./ccpp &>> output.txt
      fi
    elif [[ "$compiler" = "clang" ]]; then
      if [[ "$version" = "default" ]]; then
        clang++ "$file" -o ccpp 2> output.txt
        ./ccpp &>> output.txt
      elif [[ "$version" != "default" ]]; then
        clang++ -std="$version" "$file" -o ccpp 2> output.txt
        ./ccpp &>> output.txt
      fi
    else
      echo "that C++ compiler is not available."
      echo "the available C++ compilers are clang, g++ (default)"
    fi

  elif [[ "$platform" = "windows" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "clang" ]]; then
      if [[ "$version" = "default" ]]; then
        clang++ --target=x86_64-pc-windows-gnu "$file" -o ccpp.exe 2> output.txt
      elif [[ "$version" != "default" ]]; then
        clang++ --target=x86_64-pc-windows-gnu -std="$version" "$file" -o ccpp.exe 2> output.txt
      fi
    else
      echo "that C++ compiler is not available."
      echo "the available C++ compiler is clang (default)"
    fi

  elif [[ "$platform" = "webassembly" ]] || [[ "$platform" = "wasm" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "emcc" ]]; then
      emcc "$file" -s WASM=1 -o ccpp.js 2> output.txt
    else
      echo "that C++ compiler is not available."
      echo "the available C++ compiler is emcc (default)"
    fi
  else
    echo "C++ is not available for that platform." > output.txt
    echo "C++ is available for Windows, WebAssembly, linux (default)" >> output.txt
  fi


elif [[ "$language" = "c" ]]; then
  if [[ "$platform" = "default" ]] || [[ "$platform" = "linux" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "gcc" ]]; then
      if [[ "$version" = "default" ]]; then
        gcc "$file" -o cclang 2> output.txt
        ./cclang &>> output.txt
      elif [[ "$version" != "default" ]]; then
        gcc -std="$version" "$file" -o cclang 2> output.txt
        ./cclang &>> output.txt
      fi
    elif [[ "$compiler" = "clang" ]]; then
      if [[ "$version" = "default" ]]; then
        clang "$file" -o cclang 2> output.txt
        ./cclang &>> output.txt
      elif [[ "$version" != "default" ]]; then
        clang -std="$version" "$file" -o cclang 2> output.txt
        ./cclang &>> output.txt
      fi
    elif [[ "$compiler" = "tcc" ]]; then
      tcc "$file" -o cclang 2> output.txt
      ./cclang &>> output.txt
    else
      echo "that C compiler is not available."
      echo "the available C compilers are clang, g++ (default)"
    fi

  elif [[ "$platform" = "windows" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "clang" ]]; then
      if [[ "$version" = "default" ]]; then
        clang --target=x86_64-pc-windows-gnu "$file" -o cclang.exe 2> output.txt
      elif [[ "$version" != "default" ]]; then
        clang --target=x86_64-pc-windows-gnu -std="$version" "$file" -o cclang.exe 2> output.txt
      fi
    else
      echo "that C compiler is not available."
      echo "the available C compiler is clang (default)"
    fi

  elif [[ "$platform" = "webassembly" ]] || [[ "$platform" = "wasm" ]]; then
    if [[ "$compiler" = "default" ]] || [[ "$compiler" = "emcc" ]]; then
      emcc "$file" -s WASM=1 -o cclang.js 2> output.txt
    else
      echo "that C compiler is not available."
      echo "the available C compiler is emcc (default)"
    fi
  else
    echo "C is not available for that platform." > output.txt
    echo "C is available for Windows, WebAssembly, linux (default)" >> output.txt
  fi

else
  echo "That language is not available (yet)." > output.txt
fi
